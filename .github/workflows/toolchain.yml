name: Toolchain

# Controls when the workflow will run
on: [ push, pull_request, workflow_dispatch ]

jobs:
  build:
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: sudo apt-get install -y lld llvm
      
      - name: Set environment variables
        run: |
          ver=1.`git rev-list HEAD --count`
          echo commit_val=0.0.$ver >> $GITHUB_ENV
          echo "OO_PS4_TOOLCHAIN=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

      # Get latest musl
      - name: Fetch musl stable
        uses: i3h/download-release-asset@v1
        with:
          owner: OpenOrbis
          repo: musl
          tag: latest
          file: musl.tar.gz
      
      - run: tar -xvzf musl.tar.gz
      
      # Get latest libcxx
      - name: Fetch libcxx stable
        uses: i3h/download-release-asset@v1
        with:
          owner: OpenOrbis
          repo: llvm-project
          tag: latest
          file: libcxx-full.tar.gz
      
      - run: tar -xvzf libcxx-full.tar.gz
      
      # Get latest SDL2
      - name: Fetch SDL2
        uses: i3h/download-release-asset@v1
        with:
          owner: OpenOrbis
          repo: SDL-PS4
          tag: latest
          file: SDL2.tar.gz
      
      - run: tar -xvzf SDL2.tar.gz
      
      # Get latest library stubs
      - name: Fetch library stubs stable
        uses: i3h/download-release-asset@v1
        with:
          owner: OpenOrbis
          repo: orbis-lib-gen
          tag: latest
          file: lib.tar.gz
      
      - run: tar -xvzf lib.tar.gz
      
      # Get latest create-fself
      - name: Fetch create-fself
        uses: i3h/download-release-asset@v1
        with:
          owner: OpenOrbis
          repo: create-fself
          tag: latest
          file: binaries.tar.gz

      - run: tar -xvzf binaries.tar.gz

      # Get latest create-gp4
      - name: Fetch create-gp4
        uses: i3h/download-release-asset@v1
        with:
          owner: OpenOrbis
          repo: create-gp4
          tag: latest
          file: binaries.tar.gz

      - run: tar -xvzf binaries.tar.gz
      
      # Get latest readoelf
      - name: Fetch readoelf
        uses: i3h/download-release-asset@v1
        with:
          owner: OpenOrbis
          repo: readoelf
          tag: latest
          file: binaries.tar.gz
      
      - run: tar -xvzf binaries.tar.gz
      
      # Get maxton's publishing tools <3
      - name: Fetch windows PkgEditor
        uses: i3h/download-release-asset@v1
        with:
          owner: maxton
          repo: LibOrbisPkg
          tag: latest
          file: PkgEditor-0.2.231.zip
      
      - run: unzip PkgEditor-0.2.231.zip -d bin/windows
      
      - name: Fetch windows PkgCore
        uses: i3h/download-release-asset@v1
        with:
          owner: maxton
          repo: LibOrbisPkg
          tag: latest
          file: PkgTool.Core-0.2.231.zip
      
      - run: unzip -o PkgTool.Core-0.2.231.zip -d bin/windows
      
      - name: Fetch linux PkgCore
        uses: i3h/download-release-asset@v1
        with:
          owner: maxton
          repo: LibOrbisPkg
          tag: latest
          file: PkgTool.Core-linux-x64-0.2.231.zip
      
      - run: |
          unzip PkgTool.Core-linux-x64-0.2.231.zip -d bin/linux
          chmod +x bin/linux/PkgTool.Core
          
      - name: Fetch macOS PkgCore
        uses: i3h/download-release-asset@v1
        with:
          owner: maxton
          repo: LibOrbisPkg
          tag: latest
          file: PkgTool.Core-osx-x64-0.2.231.zip
      
      - run: |
          unzip PkgTool.Core-osx-x64-0.2.231.zip -d bin/macos
          chmod +x bin/macos/PkgTool.Core
      
      # Build crtlib
      - name: Build crtlib
        run: |
          cd src/crt
          clang crtlib.c -c -o crtlib.o && mv crtlib.o ../../lib

      # Merge compiler-rt into libc
      - name: Merge compiler-rt into libc
        run: |
          cd lib
          touch mri.txt
          echo "CREATE libcM.a"                       >> mri.txt
          echo "ADDLIB libc.a"                        >> mri.txt
          echo "ADDLIB libclang_rt.builtins-x86_64.a" >> mri.txt
          echo "SAVE"                                 >> mri.txt
          echo "END"                                  >> mri.txt
          llvm-ar -M < mri.txt && rm mri.txt && rm libc.a && mv libcM.a libc.a

      # Build sce_module
      - name: Build sce_module/ and copy to samples
        run: |
          cd src/modules
          bash build-and-copy.sh
      
      # Cleanup
      - name: Cleanup
        run: |
          rm musl.tar.gz
          rm libcxx-full.tar.gz
          rm SDL2.tar.gz
          rm lib.tar.gz
          rm binaries.tar.gz
          rm PkgEditor-0.2.231.zip
          rm PkgTool.Core-0.2.231.zip
          rm PkgTool.Core-linux-x64-0.2.231.zip
          rm PkgTool.Core-osx-x64-0.2.231.zip
      
      # Create a tarball
      - name: Create tarball
        run: |
          tar -cvzf toolchain.tar.gz --transform 's,^,OpenOrbis/PS4Toolchain/,' *
          
      # Upload artifact
      - name: Upload toolchain
        uses: actions/upload-artifact@v3
        with:
          name: toolchain.tar.gz
          path: toolchain.tar.gz
      
      # Build samples
      - name: Build samples
        run: |
          cd samples/SDL2 && make
          cp IV0000-BREW00090_00-SDLEXAMPLE000000.pkg ..
          cd ../audio-wav && make
          cp IV0000-BREW00080_00-AUDIOWAVEX000000.pkg ..
          cd ../exceptions && make
          cp IV0000-BREW00091_00-EXCEPTIONS000000.pkg ..
          cd ../font && make
          cp IV0000-BREW00081_00-FONTDRAWEX000000.pkg ..
          cd ../graphics && make
          cp IV0000-BREW00082_00-GRAPHICSEX000000.pkg ..
          cd ../hello_world && make
          cp IV0000-BREW00083_00-HELLOWORLD000000.pkg ..
          cd ../input && make
          cp IV0000-BREW00084_00-CONTROLREX000000.pkg ..
          cd ../library_example && make
          cp libExample.prx ../using_library/sce_module/
          cd ../networking && make
          cp IV0000-BREW00085_00-NETWORKKEX000000.pkg ..
          cd ../piglet && make
          cp IV0000-BREW00093_00-PIGLETGPUR000000.pkg ..
          cd ../pngdec && make
          cp IV0000-BREW00086_00-IPNGDRAWEX000000.pkg ..
          cd ../system && make
          cp IV0000-BREW00088_00-GETUSRIDEX000000.pkg ..
          cd ../threading && make
          cp IV0000-BREW00087_00-PTHREADDEX000000.pkg ..
          cd ../using_library && make
          cp IV0000-BREW00089_00-USINGLIBEX000000.pkg ..

      # Create a zip of samples
      - name: Create samples zip
        run: zip -qq -r -D samples.zip samples/*.pkg
          
      # Upload artifact
      - name: Upload samples
        uses: actions/upload-artifact@v3
        with:
          name: sample-packages
          path: samples.zip

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create $commit_val toolchain.tar.gz --target $SHORT_SHA -t $commit_val
